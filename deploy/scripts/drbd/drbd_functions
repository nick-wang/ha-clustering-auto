#!/bin/bash

LOCAL_HOST=$(hostname)
DRBD_LOGFILE="/tmp/drbd-log-${LOCAL_HOST}"
log_level=2

function getDRBDVer()
{
    # usage:
    #   case $(getDRBDVer) in
    #   9)
    #     ;;
    #   84)
    #     ;;
    #   *)
    #     ERROR

    DRBDADM="drbdadm"
    DRBDSETUP="drbdsetup"
    DRBD_VERSION="0"

    local VERSION DRBD_KERNEL_VERSION_CODE=0 DRBDADM_VERSION_CODE=0
    if VERSION="$($DRBDADM --version 2>/dev/null)"; then
        eval $VERSION
    fi
    if (( $DRBD_KERNEL_VERSION_CODE == 0x0 )) ; then
        # Maybe the DRBD module was not loaded (yet).
        # I don't want to load the module here,
        # maybe this is just a probe or stop.
        # It will be loaded on "start", though.
        # Instead, look at modinfo output.
        # Newer drbdadm does this implicitly, but may reexec older
        # drbdadm versions for compatibility reasons.
        DRBD_KERNEL_VERSION_CODE=$(printf "0x%02x%02x%02x" $(
            modinfo -F version drbd |
            sed -ne 's/^\([0-9]\+\)\.\([0-9]\+\)\.\([0-9]\+\).*$/\1 \2 \3/p'))
    fi

    if (( $DRBD_KERNEL_VERSION_CODE >= 0x090000 )) ; then
        DRBD_VERSION="9"
    elif (( $DRBD_KERNEL_VERSION_CODE >= 0x080400 )); then
        DRBD_VERSION="84"
    fi

    echo $DRBD_VERSION
}

function showDRBDStatus()
{
    # Show the drbd status of resource(s)
    # usage:
    #   showDRBDStatus      (showDRBDStatus all)
    # or
    #   showDRBDStatus <resname>

    if [ -n $1 ]
    then
        res=$1
    else
        res="all"
    fi

    case $(getDRBDVer) in
      9)
        drbdadm status $res
        ;;
      84)
        cat /proc/drbd
        ;;
      *)
        echo "Error! Wrong DRBD version."
    esac
}

function reconnectStandAloneRes()
{
    # Reconnect the standalone resource
    # usage:
    #   reconnectStandAloneRes <resname>

    retry=1
    if [[ -n "$1" ]] && [[ x"all" != x"$1" ]]
    then
        res=$1
    else
        retry=100
        echo "Script Error! Need to input resource name"
    fi

    while [ $retry -lt 6 ]
    do
      drbdadm cstate $res |grep "StandAlone" >/dev/null || break
      echo "Try reconnect($retry times) $res on $HOSTNAME"
      drbdadm disconnect $res
      sleep 2
      drbdadm connect $res
      sleep 5
      retry=$((retry+1))

      showDRBDStatus $res

    done
}

function renewOutdated()
{
    # Reconnect the outdated resource
    # usage:
    #   renewOutdated <resname>

    retry=1
    if [[ -n "$1" ]] && [[ x"all" != x"$1" ]]
    then
        res=$1
    else
        retry=100
        echo "Script Error! Need to input resource name"
    fi

    while [ $retry -lt 6 ]
    do
      drbdadm cstate $res |grep "Outdated" >/dev/null || break
      echo "Try renew($retry times) outdated $res on $HOSTNAME"
      drbdadm down $res
      sleep 2
      drbdadm up $res
      sleep 5
      retry=$((retry+1))

      showDRBDStatus $res

    done
}
